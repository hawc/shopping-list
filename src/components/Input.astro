---
const {
  id,
  name,
  classes,
  placeholder,
  type,
  list,
  value,
  isGrow = false,
} = Astro.props;
import type { HTMLAttributes } from 'astro/types';

interface Props {
  id?: string;
  name: string;
  classes?: string;
  placeholder?: string;
  type?: HTMLAttributes<'input'>['type'];
  value?: HTMLAttributes<'input'>['value'];
  list?: string;
  isGrow?: boolean;
}
---

<input
  id={id}
  name={name}
  placeholder={placeholder}
  class={`min-w-0 w-full bg-transparent border-b-2 border-gray-500 border-dashed placeholder:text-gray-500 ${
    classes ?? ''
  }`}
  type={type ?? 'text'}
  list={list}
  value={value ?? ''}
/>
<script define:vars={{ id, isGrow }}>
function handleChange(currentTarget) {
  const element = currentTarget;
  if (isGrow) {
    element.style.minWidth = '50px';
    element.style.width = '0';
  } else {
    element.style.width = '50px';
  }
  const { borderLeftWidth, borderRightWidth } = getComputedStyle(element);
  const numberPxToNumber = (numberPx) => parseInt(numberPx.slice(0, -2));
  const borderWidth =
    numberPxToNumber(borderLeftWidth) + numberPxToNumber(borderRightWidth);
  const width = `${Math.max(element.scrollWidth, 40) + borderWidth}px`;
  if (isGrow) {
    element.style.minWidth = `${width}`;
    element.style.width = '100%';
  } else {
    element.style.width = `${width}`;
  }
}

if (id) {
  const input = document.getElementById(id);
  handleChange(input);
  input.addEventListener('input', (event) =>
    handleChange(event.currentTarget)
  );
  input.addEventListener('blur', (event) =>
    handleChange(event.currentTarget)
  );
}
</script>
